server:
    addr: ":5001"
    # certificate: "/certs/auth.crt"
    # key: "/certs/auth.key"
    certificate: "/certs/mkt.registry.com.pem"
    key: "/certs/mkt.registry.com.key"
  
token:
    issuer: "Auth Service"  # Must match issuer in the Registry config.
    expiration: 900
  
# LDAP authentication.
# Authentication is performed by first binding to the server, looking up the user entry
# by using the specified filter, and then re-binding using the matched DN and the password provided.
ldap_auth:
    addr: "openldap:389"
    #tls: true
    # In case bind DN and password is required for querying user information,
    # specify them here. Plain text password is read from the file.
    # bind_dn: "uid=serviceaccount,ou=it,dc=example,dc=com"
    bind_dn: "cn=admin,dc=example,dc=org"
    # Make sure you remove newlines and carriage returns from the password file.
    bind_password_file: /certs/ldap_password.txt.clean
    # User query settings. ${account} is expanded from auth request 
    base: "ou=musicians,dc=example,dc=org"
    filter: "(&(uid=${account})(objectClass=organizationalPerson))"
  
users:
    # Password is specified as a BCrypt hash. Use htpasswd -B to generate.
    "admin":
      password: "$2y$05$LO.vzwpWC5LZGqThvEfznu8qhb5SGqvBSWY1J3yZ4AxtMRZ3kN5jC"  # badmin
    "test":
      password: "$2y$05$WuwBasGDAgr.QCbGIjKJaep4dhxeai9gNZdmBnQXqpKly57oNutya"  # 123
    
acl:
    # Admin has full access to everything.
    - match: {account: "admin"}
      actions: ["*"]
    
    # User "user" can pull stuff.
    - match: {account: "test"}
      actions: ["pull"]
      
    # This will allow authenticated users to pull/push
    - match:
        account: /.+/
      actions: ['*']